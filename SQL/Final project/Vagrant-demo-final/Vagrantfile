# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "generic/ubuntu1804"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 5432, host: 5432, host_ip: "127.0.0.1"
  # config.vm.network "forwarded_port", guest: 27017, host: 27017, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
    # Display the VirtualBox GUI when booting the machine
    # vb.gui = true
  
    # Customize the amount of memory on the VM:
    vb.memory = "2048"
  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL
    LANGUAGE=en_US
    ENCODING=UTF-8
    PROJECT=demo
    apt-get -y update
    apt-get install -y locales
    localedef -i $LANGUAGE -c -f $ENCODING -A /usr/share/locale/locale.alias $LANGUAGE.$ENCODING
    apt-get -y install postgresql mongodb
    pg_dropcluster --stop 10 main
    pg_createcluster --locale $LANGUAGE.$ENCODING --start 10 main
    apt-get -y install postgresql-client libpq-dev python3.6 virtualenv gcc python3.6-dev uuid-dev libcap-dev libpcre3-dev pgcli
    mkdir -p /tmp/deploy
    chmod 777 /tmp/deploy
    tee /tmp/deploy/database.sql << EOF
CREATE DATABASE ${PROJECT} ENCODING '${ENCODING}' TEMPLATE template0;
CREATE ROLE ${PROJECT} WITH LOGIN PASSWORD '${PROJECT}';
GRANT ALL PRIVILEGES ON DATABASE ${PROJECT} TO ${PROJECT};
ALTER USER ${PROJECT} WITH SUPERUSER;
ALTER USER ${PROJECT} WITH CREATEROLE;
ALTER USER ${PROJECT} WITH CREATEDB;
ALTER USER ${PROJECT} WITH REPLICATION;
EOF
    chmod 755 /tmp/deploy/database.sql
    su -c "psql -f /tmp/deploy/database.sql" postgres
	cd /tmp/deploy
	wget --no-check-certificate --content-disposition https://github.com/adubnov/netology-DS/blob/master/SQL/Final%20project/dataset/demo-small.zip?raw=true
	unzip ./demo-small.zip
	su -c "psql demo < /tmp/deploy/demo-small-20170815.sql" postgres
  SHELL
end
